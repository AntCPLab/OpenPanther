# Copyright 2024 Ant Group Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@yacl//bazel:yacl.bzl", "AES_COPT_FLAGS")
load("//bazel:spu.bzl", "spu_cc_binary", "spu_cc_library", "spu_cc_test")

package(default_visibility = ["//visibility:public"])

spu_cc_library(
    name = "bitwidth_change",
    srcs = ["bitwidth_adjust.cc"],
    hdrs = ["bitwidth_adjust.h"],
    deps = [
        "//libspu/mpc/cheetah/nonlinear:compare_prot",
        "//libspu/mpc/cheetah/nonlinear:truncate_prot",
        "//libspu/mpc/cheetah/ot",
        "@yacl//yacl/link",
    ],
)

spu_cc_test(
    name = "bitwidth_adjust_test",
    srcs = ["bitwidth_adjust_test.cc"],
    deps = [
        ":bitwidth_change",
        "//libspu/mpc:factory",
        "//libspu/mpc/cheetah:state",
        "//libspu/mpc/utils:simulate",
    ],
)

spu_cc_test(
    name = "dist_cmp_test",
    srcs = ["dist_cmp_test.cc"],
    deps = [
        ":dist_cmp",
        "//libspu/mpc/cheetah/rlwe:lwe",
        "//libspu/mpc/utils:simulate",
        "@com_github_microsoft_seal//:seal",
    ],
)

spu_cc_test(
    name = "dist_cmp_ss_test",
    srcs = ["dist_cmp_ss_test.cc"],
    deps = [
        ":dist_cmp",
        "//libspu/mpc/cheetah:state",
        "//libspu/mpc/cheetah/ot",
        "//libspu/mpc/cheetah/rlwe:lwe",
        "//libspu/mpc/utils:simulate",
        "@com_github_microsoft_seal//:seal",
        "@yacl//yacl/link",
    ],
)

spu_cc_binary(
    name = "util_test",
    srcs = ["util_test.cc"],
    copts = AES_COPT_FLAGS,
    data = [
        "dataset/centrios.txt",
        "dataset/dataset.txt",
        "dataset/neighbors.txt",
        "dataset/ptoc.txt",
        "dataset/stash.txt",
        "dataset/test.txt",
    ],
    deps = [
        ":common",
        "//libspu/mpc/cheetah/rlwe:lwe",
        "//libspu/mpc/utils:simulate",
        "@com_github_microsoft_seal//:seal",
    ],
)

spu_cc_binary(
    name = "panther_client",
    srcs = ["panther_client.cc"],
    copts = AES_COPT_FLAGS,
    data = [
        "dataset/neighbors.txt",
        "dataset/test.txt",
    ],
    deps = [
        ":common",
        "//libspu/mpc/cheetah/rlwe:lwe",
        "//libspu/mpc/utils:simulate",
        "@com_github_microsoft_seal//:seal",
    ],
)

spu_cc_binary(
    name = "panther_client_random",
    srcs = ["panther_client_random.cc"],
    copts = AES_COPT_FLAGS,
    deps = [
        ":common",
        "//libspu/mpc/cheetah/rlwe:lwe",
        "//libspu/mpc/utils:simulate",
        "@com_github_microsoft_seal//:seal",
    ],
)

spu_cc_binary(
    name = "panther10M_c",
    srcs = ["panther10M_c.cc"],
    copts = AES_COPT_FLAGS,
    deps = [
        ":common",
        "//libspu/mpc/cheetah/rlwe:lwe",
        "//libspu/mpc/utils:simulate",
        "@com_github_microsoft_seal//:seal",
    ],
)

spu_cc_binary(
    name = "panther_server",
    srcs = ["panther_server.cc"],
    copts = AES_COPT_FLAGS,
    data = [
        "dataset/centrios.txt",
        "dataset/dataset.txt",
        "dataset/ptoc.txt",
        "dataset/stash.txt",
    ],
    deps = [
        ":common",
        "//libspu/mpc/cheetah/rlwe:lwe",
        "//libspu/mpc/utils:simulate",
        "@com_github_microsoft_seal//:seal",
    ],
)

spu_cc_binary(
    name = "panther10M_s",
    srcs = ["panther10M_s.cc"],
    copts = AES_COPT_FLAGS,
    deps = [
        ":common",
        "//libspu/mpc/cheetah/rlwe:lwe",
        "//libspu/mpc/utils:simulate",
        "@com_github_microsoft_seal//:seal",
    ],
)

spu_cc_binary(
    name = "panther_server_random",
    srcs = ["panther_server_random.cc"],
    copts = AES_COPT_FLAGS,
    deps = [
        ":common",
        "//libspu/mpc/cheetah/rlwe:lwe",
        "//libspu/mpc/utils:simulate",
        "@com_github_microsoft_seal//:seal",
    ],
)

spu_cc_binary(
    name = "panther_local_test",
    srcs = ["panther_local_test.cc"],
    copts = AES_COPT_FLAGS,
    data = [
        "dataset/centrios.txt",
        "dataset/dataset.txt",
        "dataset/neighbors.txt",
        "dataset/ptoc.txt",
        "dataset/stash.txt",
        "dataset/test.txt",
    ],
    deps = [
        ":common",
        "//libspu/mpc/cheetah/rlwe:lwe",
        "//libspu/mpc/utils:simulate",
        "@com_github_microsoft_seal//:seal",
    ],
)

spu_cc_test(
    name = "batch_min_test",
    srcs = ["batch_min_test.cc"],
    deps = [
        ":batch_min",
        "//libspu/mpc:factory",
        "//libspu/mpc/utils:simulate",
    ],
)

spu_cc_library(
    name = "batch_min",
    srcs = ["batch_min.cc"],
    hdrs = ["batch_min.h"],
    deps = [
        ":bitwidth_change",
        "//libspu/mpc/cheetah:state",
        "//libspu/mpc/cheetah/nonlinear:compare_prot",
        "//libspu/mpc/cheetah/nonlinear:equal_prot",
        "//libspu/mpc/cheetah/nonlinear:truncate_prot",
    ],
)

spu_cc_library(
    name = "dist_cmp",
    srcs = ["dist_cmp.cc"],
    hdrs = ["dist_cmp.h"],
    deps = [
        "//libspu/mpc/cheetah/arith:arith_comm",
        "//libspu/mpc/cheetah/rlwe:modswitch_helper",
        "@com_github_microsoft_seal//:seal",
        "@yacl//yacl/utils:parallel",
    ],
)

spu_cc_library(
    name = "topk",
    srcs = ["gc_topk.cc"],
    hdrs = ["gc_topk.h"],
    deps = [
        "@com_github_emptoolkit_emp_sh2pc//:emp-sh2pc",
    ],
)

spu_cc_library(
    name = "common",
    srcs = ["common.cc"],
    hdrs = ["common.h"],
    copts = AES_COPT_FLAGS,
    deps = [
        ":batch_min",
        ":bitwidth_change",
        ":dist_cmp",
        ":topk",
        "//experimental/ann/fix_pir_customed:seal_mpir",
        "//libspu/device:io",
        "//libspu/mpc/cheetah:state",
        "//libspu/psi/cryptor:sodium_curve25519_cryptor",
        "@com_github_openssl_openssl//:openssl",
        "@com_google_absl//absl/strings",
        "@llvm-project//llvm:Support",
        "@yacl//yacl/base:buffer",
        "@yacl//yacl/link:factory",
    ],
)

spu_cc_binary(
    name = "panther_demo",
    srcs = ["panther_demo.cc"],
    copts = AES_COPT_FLAGS,
    deps = [
        ":batch_min",
        ":bitwidth_change",
        ":dist_cmp",
        ":topk",
        "//experimental/ann/fix_pir_customed:seal_mpir",
        "//libspu/device:io",
        "//libspu/mpc/cheetah:state",
        "//libspu/psi/cryptor:sodium_curve25519_cryptor",
        "@com_github_openssl_openssl//:openssl",
        "@com_google_absl//absl/strings",
        "@llvm-project//llvm:Support",
        "@yacl//yacl/base:buffer",
        "@yacl//yacl/link:factory",
    ],
)

spu_cc_binary(
    name = "distance_benchmark",
    srcs = ["distance_benchmark.cc"],
    copts = AES_COPT_FLAGS,
    deps = [
        ":batch_min",
        ":bitwidth_change",
        ":dist_cmp",
        ":topk",
        "//experimental/ann/fix_pir_customed:seal_mpir",
        "//libspu/device:io",
        "//libspu/mpc/cheetah:state",
        "//libspu/psi/cryptor:sodium_curve25519_cryptor",
        "@com_github_openssl_openssl//:openssl",
        "@com_google_absl//absl/strings",
        "@llvm-project//llvm:Support",
        "@yacl//yacl/base:buffer",
        "@yacl//yacl/link:factory",
    ],
)

spu_cc_binary(
    name = "topk_benchmark",
    srcs = ["mixed_topk_benchmark.cc"],
    copts = AES_COPT_FLAGS,
    deps = [
        ":batch_min",
        ":dist_cmp",
        ":topk",
        "//experimental/ann/fix_pir_customed:seal_mpir",
        "//libspu/device:io",
        "//libspu/mpc/cheetah:state",
        "//libspu/psi/cryptor:sodium_curve25519_cryptor",
        "@com_github_openssl_openssl//:openssl",
        "@com_google_absl//absl/strings",
        "@llvm-project//llvm:Support",
        "@yacl//yacl/link:factory",
    ],
)

spu_cc_binary(
    name = "topk_test",
    srcs = ["gc_topk_test.cc"],
    copts = AES_COPT_FLAGS,
    deps = [
        ":topk",
        "@com_github_openssl_openssl//:openssl",
    ],
)

spu_cc_binary(
    name = "panther_plain",
    srcs = ["panther_plain.cc"],
    copts = AES_COPT_FLAGS,
    data = [
        "dataset/centrios.txt",
        "dataset/dataset.txt",
        "dataset/neighbors.txt",
        "dataset/ptoc.txt",
        "dataset/stash.txt",
        "dataset/test.txt",
    ],
    deps = [
        ":dist_cmp",
    ],
)
